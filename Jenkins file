pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'kbhara/helloworld-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/kav96-coder/HelloWorld.git', branch: 'master'
            }
        }

        stage('Check Docker') {
            steps {
                sh 'docker version'
            }
}


        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'Dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh 'echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                }
            }
        }

        stage('Check Kubectl') {
            steps {
                 withCredentials([file(credentialsId: 'Kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG_FILE
                    kubectl version --client
                    kubectl get nodes
                    '''
                }
            }
        }


        

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'Kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    export KUBECONFIG=$KUBECONFIG_FILE
                    kubectl set image deployment/helloworld helloworld=${DOCKER_IMAGE}:${IMAGE_TAG} --record || \
                    kubectl apply -f kubernetes/deployment.yaml
                    kubectl rollout status deployment/helloworld
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
